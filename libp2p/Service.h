/*
    This file is part of FISCO-BCOS.

    FISCO-BCOS is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    FISCO-BCOS is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with FISCO-BCOS.  If not, see <http://www.gnu.org/licenses/>.
*/
/** @file Service.h
 *  @author molan
 *  @modify first draft
 *  @date 20180910
 *  @author chaychen
 *  @modify realize encode and decode, add timeout, code format
 *  @date 20180911
 */

#pragma once
#include <libdevcore/Common.h>
#include <libdevcore/Exceptions.h>
#include <libdevcore/FixedHash.h>
#include <memory>
#include <libnetwork/Host.h>
#include "P2PInterface.h"
#include "P2PMsgHandler.h"

namespace dev
{
namespace p2p
{
class Service : public P2PInterface, public std::enable_shared_from_this<Service>
{
public:
    Service();
    virtual ~Service() {}

    Message::Ptr sendMessageByNodeID(NodeID nodeID, P2PMessage::Ptr message) override;

    void asyncSendMessageByNodeID(NodeID nodeID, P2PMessage::Ptr message,
        CallbackFunc callback = [](NetworkException e, Message::Ptr msg) {},
        Options options = Options()) override;

    P2PMessage::Ptr sendMessageByTopic(std::string const& topic, P2PMessage::Ptr message) override;

    void asyncSendMessageByTopic(std::string const& topic, P2PMessage::Ptr message,
        CallbackFunc callback, Options const& options) override;

    void asyncMulticastMessageByTopic(std::string const& topic, Message::Ptr message) override;

    void asyncMulticastMessageByNodeIDList(NodeIDs const& nodeIDs, Message::Ptr message) override;

    void asyncBroadcastMessage(Message::Ptr message, Options const& options) override;

    void registerHandlerByProtoclID(
        PROTOCOL_ID protocolID, CallbackFuncWithSession handler) override;

    void registerHandlerByTopic(std::string const& topic, CallbackFuncWithSession handler) override;

    void setTopicsByNode(
        NodeID const& _nodeID, std::shared_ptr<std::vector<std::string>> _topics) override;

    std::shared_ptr<std::vector<std::string>> getTopicsByNode(NodeID const& _nodeID) override;

    ///< Only connected node
    SessionInfos sessionInfos() const override;

    SessionInfos sessionInfosByProtocolID(PROTOCOL_ID _protocolID) const override;

    bool isConnected(NodeID const& _nodeID) const override;

    void setGroupID2NodeList(std::map<GROUP_ID, h512s> const& _groupID2NodeList) override { m_groupID2NodeList = _groupID2NodeList; }

    std::shared_ptr<std::vector<std::string>> topics() const override { return m_topics; }
    void setTopics(std::shared_ptr<std::vector<std::string>> _topics) override { m_topics = _topics; }

    std::shared_ptr<Host> host() { return m_host; }
    void setHost(std::shared_ptr<Host> host) { m_host = host; }

    std::shared_ptr<P2PMsgHandler> p2pMsgHandler() { return m_p2pMsgHandler; }
    void setP2PMsgHandler(std::shared_ptr<P2PMsgHandler> p2pMsgHandler) { m_p2pMsgHandler = p2pMsgHandler; }

private:
    void onTimeoutByTopic(const boost::system::error_code& error,
        std::shared_ptr<SessionFace> oriSession, NodeIDs& nodeIDsToSend, P2PMessage::Ptr message,
        CallbackFunc callback, Options const& options, uint32_t totalTimeout);
#if 0
    void onTimeoutByNode(
        const boost::system::error_code& error, uint32_t seq, std::shared_ptr<SessionFace> p);
#endif

    NodeIDs getPeersByTopic(std::string const& topic);

    bool isSessionInNodeIDList(NodeID const& targetNodeID, NodeIDs const& nodeIDs);

    std::shared_ptr<Host> m_host;

    std::shared_ptr<P2PMsgHandler> m_p2pMsgHandler;
    std::atomic<uint32_t> m_seq = {0};  ///< The message identify is generated by the service by

    //add for p2p
    /// maps from node ids to the sessions
    mutable std::unordered_map<NodeID, std::shared_ptr<SessionFace>> m_sessions;
    mutable RecursiveMutex x_sessions;

    ///< Topics being concerned by myself
    std::shared_ptr<std::vector<std::string>> m_topics;

    ///< key is the group that the node joins
    ///< value is the list of node members for the group
    ///< the data is currently statically loaded and not synchronized between nodes
    std::map<GROUP_ID, h512s> m_groupID2NodeList;
};

}  // namespace p2p

}  // namespace dev
